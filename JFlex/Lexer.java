/* The following code was generated by JFlex 1.7.0 */

import java.util.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>Lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\12\0\1\1\1\36\1\36\1\2\23\0\1\27\4\0\1\25\1\0"+
    "\1\12\1\13\1\0\1\14\1\6\2\0\1\15\1\10\11\7\1\0"+
    "\1\31\1\0\1\30\1\26\42\0\1\22\3\11\1\20\1\21\1\11"+
    "\1\35\1\3\2\11\1\23\1\11\1\4\3\11\1\16\1\24\1\5"+
    "\1\17\1\11\1\34\3\11\1\32\1\0\1\33\7\0\1\36\u1fa2\0"+
    "\1\36\1\36\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\3\4\1\5\2\6\1\7"+
    "\1\10\1\11\1\12\2\4\1\1\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\4\1\3\1\4\1\21\3\4"+
    "\1\22\1\23\1\4\1\24\4\4\1\25\1\26\1\4"+
    "\1\27";

  private static int [] zzUnpackAction() {
    int [] result = new int[42];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\37\0\37\0\76\0\135\0\174\0\233\0\37"+
    "\0\272\0\37\0\37\0\37\0\37\0\37\0\331\0\370"+
    "\0\u0117\0\37\0\37\0\37\0\37\0\u0136\0\37\0\u0155"+
    "\0\37\0\u0174\0\174\0\u0193\0\u01b2\0\u01d1\0\37\0\37"+
    "\0\u01f0\0\174\0\u020f\0\u022e\0\u024d\0\u026c\0\174\0\174"+
    "\0\u028b\0\174";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[42];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\6\1\13\1\14\1\15\1\16\2\6\1\17"+
    "\1\20\3\6\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\6\1\31\40\0\1\3\40\0\1\6"+
    "\1\32\1\6\3\0\1\6\4\0\3\6\1\33\3\6"+
    "\7\0\2\6\4\0\3\6\3\0\1\6\4\0\7\6"+
    "\7\0\2\6\4\0\3\6\3\0\1\6\4\0\1\34"+
    "\6\6\7\0\2\6\10\0\2\11\31\0\3\6\3\0"+
    "\1\6\4\0\5\6\1\35\1\6\7\0\2\6\4\0"+
    "\3\6\3\0\1\6\4\0\4\6\1\36\2\6\7\0"+
    "\2\6\26\0\1\37\44\0\1\40\6\0\3\6\3\0"+
    "\1\6\4\0\7\6\7\0\1\6\1\41\4\0\2\6"+
    "\1\42\3\0\1\6\4\0\7\6\7\0\2\6\4\0"+
    "\3\6\3\0\1\6\4\0\1\6\1\43\5\6\7\0"+
    "\2\6\4\0\3\6\3\0\1\6\4\0\6\6\1\44"+
    "\7\0\2\6\4\0\3\6\3\0\1\6\4\0\5\6"+
    "\1\45\1\6\7\0\2\6\4\0\1\46\2\6\3\0"+
    "\1\6\4\0\7\6\7\0\2\6\4\0\3\6\3\0"+
    "\1\6\4\0\2\6\1\47\4\6\7\0\2\6\4\0"+
    "\3\6\3\0\1\6\4\0\2\6\1\50\4\6\7\0"+
    "\2\6\4\0\3\6\3\0\1\6\4\0\6\6\1\43"+
    "\7\0\2\6\4\0\3\6\3\0\1\6\4\0\5\6"+
    "\1\51\1\6\7\0\2\6\4\0\3\6\3\0\1\6"+
    "\4\0\2\6\1\52\4\6\7\0\2\6\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[682];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\4\1\1\11\1\1\5\11\3\1\4\11"+
    "\1\1\1\11\1\1\1\11\5\1\2\11\12\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[42];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    // The else node used to disallow the user to miss the "else" keyword.
    class ElseNode extends Statement {
        @Override
        protected String Show(int level) {
            return "";
        }

        @Override
        public void accept(IVisitor visitor) throws Exception {
        }
    }

    // The stack of our automaton. 
	Stack<Expression> stack = new Stack<>();
    
    // Counter for number of lines
    int lineNum = 1;
    
    // Check for compile errors
    boolean compiationError = false;
    int errorLine = -1;
    boolean initLine = true;

    /**
     * Check if {@code ex} is a valid arithmetic expression.
     */
    private void checkForArithExpr(Expression ex) throws Exception {
        if (!(ex instanceof ArithExpression || ex instanceof BracketNode))
            throw new Exception("No arithmetic expression provided!");
        
        if (ex instanceof ArithExpression) {
            ArithExpression arith = (ArithExpression)ex;

            if (arith instanceof PlusNode 
                    && (((PlusNode)arith).leftChild == null
                        || ((PlusNode)arith).rightChild == null)) {
                throw new Exception("Incomplete \"+\" operation given!");
            }

            if (arith instanceof DivNode 
                    && (((DivNode)arith).leftChild == null
                        || ((DivNode)arith).rightChild == null)) {
                throw new Exception("Incomplete \"/\" operation given!");
            }
        } else if (ex instanceof BracketNode) {
            BracketNode bracket = (BracketNode)ex;

            if (!bracket.isArithmetic())
                throw new Exception("Arithmetic bracket type expected, but " +
                                    "boolean bracket given!");
        } 
    }

    /**
     * Check if {@code ex} is a valid boolean expression.
     */
    private void checkForBoolExpr(Expression ex) throws Exception {
        if (!(ex instanceof BoolExpression || ex instanceof BracketNode))
            throw new Exception("No boolean expression provided!");

        if (ex instanceof BoolExpression) {
            BoolExpression boolExpr = (BoolExpression)ex;

            if (boolExpr instanceof AndNode
                    && (((AndNode)boolExpr).leftChild == null
                        || ((AndNode)boolExpr).rightChild == null)) {
                throw new Exception("Incomplete \"&&\" operation given!");
            }

            if (boolExpr instanceof NotNode
                    && ((NotNode)boolExpr).child == null){
                throw new Exception("Incomplete \"!\" operation given!");
            }
        } else if (ex instanceof BracketNode) {
            BracketNode bracket = (BracketNode)ex;

            if (!bracket.isBoolean())
                throw new Exception("Boolean bracket type expected, but " +
                                    "arithmetic bracket given!");
        }
    }

    /**
     * Apply the nested NOT rule
     */
    private void nestedNotRule(NotNode not, ArithExpression operator, 
            Expression lastNode) {
        stack.push(not);
        stack.push(not.child);
        stack.push(operator);
        arithReduceStack(lastNode);
        stack.pop();
    }

    /**
     * Apply the nested AND rule
     */
    private void nestedAndRule(AndNode and, ArithExpression operator, 
            Expression lastNode) {
        stack.push(and);
        stack.push(and.rightChild);
        stack.push(operator);
        arithReduceStack(lastNode);
        stack.pop();
    }

    /**
     * Apply the GREATER reduction
     */
    private void greaterRule(ArithExpression operator, GreaterNode greater, 
            Expression lastNode, Expression toPush) {
        
        if (operator instanceof PlusNode) {
            PlusNode plus = (PlusNode)operator;

            plus.leftChild = greater.rightChild;
            plus.rightChild = lastNode;
            greater.rightChild = plus;

        } else if (operator instanceof DivNode) {
            DivNode div = (DivNode)operator;

            if (greater.rightChild instanceof PlusNode) {
                PlusNode plus = (PlusNode)greater.rightChild;
                div.leftChild = plus.rightChild;
                div.rightChild = lastNode;
                plus.rightChild = div;

            } else {
                div.leftChild = greater.rightChild;
                div.rightChild = lastNode;
                greater.rightChild = div;
                
            } 
        }

        stack.push(toPush);
    }

    /**
     * Apply the BOOLEAN rules
     */
    void booleanRules(ArithExpression operator, Expression leftMember,
            Expression lastNode) {

        if (leftMember instanceof GreaterNode) {
            GreaterNode greater = (GreaterNode)leftMember;
            greaterRule(operator, greater, lastNode, greater);

        } else if (leftMember instanceof AndNode) {
            AndNode and = (AndNode)leftMember;

            if (and.rightChild instanceof GreaterNode) {
                GreaterNode greater = (GreaterNode)and.rightChild;
                greaterRule(operator, greater, lastNode, and);   
                
            } else {
               nestedAndRule(and, operator, lastNode);
            }
        } else if (leftMember instanceof NotNode) {
            NotNode not = (NotNode)leftMember;

            if (not.child instanceof GreaterNode) {
                GreaterNode greater = (GreaterNode)not.child;
                greaterRule(operator, greater, lastNode, not);
                      
            } else {
                nestedNotRule(not, operator, lastNode);
            }
        }
    }

    /**
     * Apply the PLUS rules
     */    
    private void plusRules(PlusNode plus, Expression lastNode) {
        if (emptyStack())
            throw new Error("+ operator must have a left hand side member!");

        Expression leftMember = stack.pop();
        boolean isArithmetic = true;

        // Check left member for arithmetic expression 
        try {
            checkForArithExpr(leftMember);
        } catch (Exception e) {
            isArithmetic = false;
        }

        if (isArithmetic) {
            plus.leftChild = leftMember;
            plus.rightChild = lastNode;
            stack.push(plus);

        } else {
            booleanRules(plus, leftMember, lastNode);
        }
    }

    /**
     * Apply the DIV rules
     */
    private void divRules(DivNode div, Expression lastNode) {
         if (emptyStack())
            throw new Error("/ operator must have a left hand side member!");

        Expression leftMember = stack.pop();
        boolean isArithmetic = true;

        // Check left member for arithmetic expression 
        try {
            checkForArithExpr(leftMember);
        } catch (Exception e) {
            isArithmetic = false;
        }

        if (isArithmetic) {
            if (leftMember instanceof PlusNode) {
                PlusNode plus = (PlusNode)leftMember;
                div.leftChild = plus.rightChild;
                div.rightChild = lastNode;
                plus.rightChild = div;
                
                stack.push(plus);
            } else {
                div.leftChild = leftMember;
                div.rightChild = lastNode;

                stack.push(div);
            }
        } else {
            booleanRules(div, leftMember, lastNode);
        }
    }

    /**
     * Apply the GREATER rules
     */
    private void greaterRules(GreaterNode greater, Expression lastNode) {
        if (emptyStack()) 
            throw new Error("> operator must have a left hand side member!");

        Expression leftMember = stack.pop();
        try {
            checkForArithExpr(leftMember);
            checkForArithExpr(lastNode);
        } catch (Exception e) {
            throw new Error(e.getMessage());
        }

        // Put the Greater node into AST
        greater.leftChild = leftMember;
        greater.rightChild = lastNode;

        boolReduceStack(greater);
    }

    /**
     * Apply reduction for arithmetic expressions
     */
    private void arithReduceStack(Expression lastNode) {
        // Arith function should have an arithmetic expression parameter
        try {
            checkForArithExpr(lastNode);
        } catch (Exception e) {
            throw new Error("Invalid arithReduceStack() call! " + 
                e.getMessage());
        } 

        // If the stack is empty, put the node on stack
        if (emptyStack()) {
            stack.push(lastNode);
            return;
        }

        // If the stack is non-empty, then apply the rules
        if (stack.peek() instanceof PlusNode) {
            PlusNode plus = (PlusNode)stack.pop();
            plusRules(plus, lastNode);
        } else if (stack.peek() instanceof DivNode) {
            DivNode div = (DivNode)stack.pop();
            divRules(div, lastNode);
        } else if (stack.peek() instanceof GreaterNode) {
            GreaterNode greater = (GreaterNode)stack.pop();
            greaterRules(greater, lastNode);
        } else {
            stack.push(lastNode);
        }
    }

    /**
     * Apply the AND rules
     */
    private void andRules(AndNode and, Expression lastNode) {
        if (emptyStack())
            throw new Error("&& operator must have a left hand side member!");

        Expression leftMember = stack.pop();
        boolean isBoolean = true;

        // Bool function should have a boolean expression parameter
        try {
            checkForBoolExpr(leftMember);
        } catch (Exception e) {
            isBoolean = false;
        }

        if (isBoolean) {
            and.leftChild = leftMember;
            and.rightChild = lastNode;

            stack.push(and);
        }
    }

    /**
     * Apply the NOT rules
     */
    private void notRules(NotNode not, Expression lastNode) {
        if (!emptyStack() && stack.peek() instanceof AndNode) {
            AndNode and = (AndNode)stack.pop();

            // Here we cannot have empty stack!
            if (emptyStack())
                throw new Error("&& operator must have a left hand side " + 
                                "member!");

            Expression leftMember = stack.pop();
            boolean isBoolean = true;

            // Bool function should have a boolean expression parameter
            try {
                checkForBoolExpr(leftMember);
            } catch (Exception e) {
                isBoolean = false;
            }

            if (isBoolean) {
                and.leftChild = leftMember;
                and.rightChild = not;
                not.child = lastNode;

                stack.push(and);
            }
        } else {        
            not.child = lastNode;
            boolReduceStack(not);
        }
    }

    /**
     * Apply the reduction for boolean expressions
     */
    private void boolReduceStack(Expression lastNode) {
        // Bool function should have a boolean expression parameter
        try {
            checkForBoolExpr(lastNode);
        } catch (Exception e) {
            throw new Error("Invalid boolReduceStack() call! " + 
                e.getMessage());
        }

        // If the stack is empty, put the node on stack
        if (emptyStack()) {
            stack.push(lastNode);
            return;
        }

        // Apply the rules
        if (stack.peek() instanceof AndNode) {
            AndNode and = (AndNode)stack.pop();
            andRules(and, lastNode);
            
        } else if (stack.peek() instanceof NotNode) {
            NotNode not = (NotNode)stack.pop();
            notRules(not, lastNode);

        } else if (stack.peek() instanceof IfNode) {
            stack.push(lastNode);
        } else if (stack.peek() instanceof WhileNode) {
            stack.push(lastNode);
        } else {
            try {
                checkForBoolExpr(stack.peek());
            } catch (Exception e) {
                throw new Error("Cannot match to a boolean expression! " + 
                    e.getMessage());
            }
            stack.push(lastNode);
        }
    }

    /**
     * Apply the reduction for statements
     */
    private void reduceStatement(Statement stmt) {
        if (!emptyStack() && stack.peek() instanceof Statement) {
            if (stack.peek() instanceof BlockNode) {
                BlockNode block = (BlockNode)stack.peek();
                if (!block.isSet){
                    stack.push(stmt);
                    return;
                }
            }

            if (stack.peek() instanceof SequenceNode) {
                SequenceNode seq = (SequenceNode)stack.peek();

                if (seq.rightChild instanceof SequenceNode) {
                    stack.push(seq.rightChild);
                    reduceStatement(stmt);
                    stack.pop();
                } else {
                    SequenceNode newSeq = new SequenceNode();
                    newSeq.leftChild = seq.rightChild;
                    newSeq.rightChild = stmt;
                    seq.rightChild = newSeq;
                }

            } else {
                SequenceNode seq = new SequenceNode(); 
                seq.leftChild = (Statement)stack.pop();
                seq.rightChild = stmt;

                stack.push(seq);
            }

        } else {
            stack.push(stmt);
        }
    }

    /**
     * Apply the reduction for blocks
     */
    private void sequenceBlocks() {
        if (emptyStack()) 
            return;

        if (stack.peek() instanceof BlockNode) {
            BlockNode stmt1 = (BlockNode)stack.pop();

            if (!emptyStack() && stack.peek() instanceof ElseNode) {
                stack.pop();

                if (!emptyStack() && stack.peek() instanceof BlockNode) {
                    BlockNode stmt2 = (BlockNode)stack.pop();
                    
                    if (!emptyStack() && stack.peek() instanceof BracketNode) {
                        BracketNode cond = (BracketNode)stack.pop();

                        if (cond.isBoolean()) {
                            if (stack.peek() instanceof IfNode) {
                                IfNode ifStmt = (IfNode)stack.pop();
                                ifStmt.condition = cond;
                                ifStmt.thenBranch = stmt2;
                                ifStmt.elseBrench = stmt1;

                                reduceStatement(ifStmt);
                            } else {
                                throw new Error("If statement expected!");
                            }

                        } else {
                            throw new Error("Condition cannot be other than " + 
                                            "boolean!");
                        }
                    }
                }

            } else if (!emptyStack() && stack.peek() instanceof BracketNode) {
                BracketNode cond = (BracketNode)stack.pop();

                if (cond.isBoolean()) {
                    if (stack.peek() instanceof WhileNode) {
                        WhileNode whileStmt = (WhileNode)stack.pop();
                        whileStmt.condition = cond;
                        whileStmt.body = stmt1;

                        reduceStatement(whileStmt);
                    } else {
                        stack.push(cond);
                        stack.push(stmt1);
                    }
                } else {
                    throw new Error("Condition cannot be other than boolean!");
                }          
            } else if (!emptyStack() && stack.peek() instanceof BlockNode) {
                BlockNode stmt2 = (BlockNode)stack.pop();
                if (stmt1.isSet && stmt2.isSet) {
                    SequenceNode seq = new SequenceNode();
                    seq.rightChild = stmt1;
                    seq.leftChild = stmt2;

                    stack.push(seq);
                } else if (stmt1.isSet && !stmt2.isSet) {
                    stmt2.set(stmt1);
                    stack.push(stmt2);
                    stack.push(stmt1);              
                }     
            } else if (!emptyStack() && stack.peek() instanceof SequenceNode) {
                SequenceNode stmt2 = (SequenceNode)stack.peek();

                SequenceNode seq = new SequenceNode();
                seq.rightChild = stmt1;
                seq.leftChild = stmt2.rightChild;
                stmt2.rightChild = seq;

            } else {
                stack.push(stmt1);
            }
        }
    }

    /**
     * Reduce expressions when ')' is parsed
     */
    private void closeParenthesis() {
        try {
            Expression crtExpr = stack.pop();
            Expression lastOpenParenthesis = stack.pop();

            if (lastOpenParenthesis instanceof BracketNode) {
                BracketNode openBracket = (BracketNode)lastOpenParenthesis;
                openBracket.child = crtExpr;
                openBracket.setType();
                stack.push(lastOpenParenthesis);

                if (openBracket.isArithmetic())
                    arithReduceStack(stack.pop());
                else if (openBracket.isBoolean())
                    boolReduceStack(stack.pop());
                    
            } else {
                /* Parsing error! */
                throw new Error("Error while parsing parenthesis!");
            }
        } catch (EmptyStackException e) {
            throw new Error("Error while parsing! Empty stack exception " + 
                            "thrown!");
        }
    }

    /**
     * Reduce statement when semicolon is parsed
     */
    private void semicolonReduction() {
        if (emptyStack())
            throw new Error("Semicolon cannot be used alone!");

        addVariableToList();

         // Check stack peek for arithmetic expression 
        try {
            checkForArithExpr(stack.peek());
        } catch (Exception e) {
            if (!initLine)
                throw new Error("Assignment cannot have other than " + 
                                "arithmetic expression as right operand!");
            else return;
        }

        Expression arith = stack.pop();

        if (emptyStack())
            throw new Error("Semicolon cannot be used with arithmetic " + 
                            "expressions!");
        
        if (stack.peek() instanceof AssignmentNode) {
            AssignmentNode assign = (AssignmentNode)stack.pop();

            if (!emptyStack() && stack.peek() instanceof VarNode) {
                VarNode var = (VarNode)stack.pop();
                var.main = (MainNode)stack.firstElement();
                assign.variable = var;
                assign.value = arith;

                reduceStatement(assign);
            } else {
                throw new Error("VarNode required as left operand of " +
                                "assignment!");
            }
        }
        
    }

    /**
     * Reduce blocks when '}' is parsed
     */
    private void closeBlock() {
        if (emptyStack()) 
            throw new Error("No block detected on stack!");
                
        if (stack.peek() instanceof Statement) {
            if (stack.peek() instanceof BlockNode) {
                BlockNode block = (BlockNode)stack.peek();
                if (block.isSet) {
                    Statement stmt = (Statement)stack.pop();
                    if (emptyStack()) 
                        throw new Error("No block detected on stack!");

                    if (stack.peek() instanceof BlockNode) {
                        BlockNode block2 = (BlockNode)stack.peek();
                        block2.set(stmt);
                    } else {
                        throw new Error("No block detected on stack!");
                    }
                } else {
                    block.set(null);
                }
            } else {
                Statement stmt = (Statement)stack.pop();
                if (emptyStack()) 
                    throw new Error("No block detected on stack!");
                
                if (stack.peek() instanceof BlockNode) {
                    BlockNode block = (BlockNode)stack.peek();
                    block.set(stmt);

                } else {
                    throw new Error("No block detected on stack!");
                }
            }
        }
        
        sequenceBlocks();
    }

    /* 
     * Add variables to variables list 
     */
    private void addVariableToList() {
        if (stack.peek() instanceof VarNode) {
            VarNode var = (VarNode)stack.pop();
            
            if (stack.peek() instanceof MainNode) {
                MainNode mainNode = (MainNode)stack.peek();
                mainNode.varList.put(var.name, null);
            } else {
                stack.push(var);
            }
        }
    }
    
    /* 
     * Check for empty stack 
     */
    private boolean emptyStack() {
        return stack.isEmpty() || stack.peek() instanceof MainNode;
    }



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 138) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
        // Now on stack, we must have 2 nodes: the main node and the statements.
    if (!stack.isEmpty() && stack.peek() instanceof Statement) {
        Statement stmt = (Statement)stack.pop();
        if (!stack.isEmpty() && stack.peek() instanceof MainNode) {
            MainNode main = (MainNode)stack.peek();
            main.child = stmt;
        } else {
            throw new Error("Program must start with an int statement!");
        }
    }

    // When we reach eof, we check if the stack has only one node,
    // otherwise it's a parsing error.
    if (stack.size() > 1)
        throw new Error("Stack does not have one node after parsing!");
    else if (stack.size() == 0) 
        throw new Error("Stack cannot have zero elements after parsing!");

    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
        return YYEOF;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { 
            } 
            // fall through
          case 24: break;
          case 2: 
            { lineNum++;
            } 
            // fall through
          case 25: break;
          case 3: 
            { System.out.print(yytext());
            } 
            // fall through
          case 26: break;
          case 4: 
            { VarNode var = new VarNode(yytext());
    var.line = lineNum;
    var.main = (MainNode)stack.firstElement();

    if (!initLine && !compiationError && !var.main.varList.containsKey(var.name)) {
        compiationError = true;
        errorLine = lineNum;
    }

    arithReduceStack(var);
            } 
            // fall through
          case 27: break;
          case 5: 
            { addVariableToList();
            } 
            // fall through
          case 28: break;
          case 6: 
            { IntNode node = new IntNode(Integer.parseInt(yytext()));
    node.line = lineNum;
    arithReduceStack(node);
            } 
            // fall through
          case 29: break;
          case 7: 
            { BracketNode node = new BracketNode();
    node.line = lineNum;
    stack.push(node);
            } 
            // fall through
          case 30: break;
          case 8: 
            { closeParenthesis();
            } 
            // fall through
          case 31: break;
          case 9: 
            { PlusNode node = new PlusNode();
    node.line = lineNum;
    stack.push(node);
            } 
            // fall through
          case 32: break;
          case 10: 
            { DivNode node = new DivNode();
    node.line = lineNum;
    stack.push(node);
            } 
            // fall through
          case 33: break;
          case 11: 
            { GreaterNode node = new GreaterNode();
    node.line = lineNum;
    stack.push(node);
            } 
            // fall through
          case 34: break;
          case 12: 
            { NotNode node = new NotNode();
    node.line = lineNum;
    stack.push(node);
            } 
            // fall through
          case 35: break;
          case 13: 
            { AssignmentNode node = new AssignmentNode();
    node.line = lineNum;
    stack.push(node);
            } 
            // fall through
          case 36: break;
          case 14: 
            { semicolonReduction(); 
    if (initLine) 
        initLine = false;
            } 
            // fall through
          case 37: break;
          case 15: 
            { stack.push(new BlockNode());
            } 
            // fall through
          case 38: break;
          case 16: 
            { closeBlock();
            } 
            // fall through
          case 39: break;
          case 17: 
            { IfNode node = new IfNode();
    node.line = lineNum;
    stack.push(node);
            } 
            // fall through
          case 40: break;
          case 18: 
            { AndNode node = new AndNode();
    node.line = lineNum;
    stack.push(node);
            } 
            // fall through
          case 41: break;
          case 19: 
            { stack.push(new BlockNode());
    closeBlock();
            } 
            // fall through
          case 42: break;
          case 20: 
            { MainNode node = new MainNode();
    node.line = lineNum;
    stack.push(node);
            } 
            // fall through
          case 43: break;
          case 21: 
            { BoolNode node = new BoolNode(Boolean.parseBoolean(yytext()));
    node.line = lineNum;
    boolReduceStack(node);
            } 
            // fall through
          case 44: break;
          case 22: 
            { ElseNode node = new ElseNode();

    stack.push(node);
            } 
            // fall through
          case 45: break;
          case 23: 
            { WhileNode node = new WhileNode();
    node.line = lineNum;
    stack.push(node);
            } 
            // fall through
          case 46: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java Lexer [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        Lexer scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new Lexer(reader);
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
